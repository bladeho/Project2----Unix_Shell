#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <string.h>
#include <fcntl.h>

#define MAX_LINE 80 /* The maximum length of a command */
#define BUFFER_SIZE 50

int count = 0;
char history[50][BUFFER_SIZE]; //history array


int parser(char inputBuffer[], char *args[])
{
   	int length;
    int i;     // loop index
    int begin;  // index of beginning
    int ct = 0; // index of next parameter

 	length = read(STDIN_FILENO, inputBuffer, MAX_LINE);	
 
    begin = -1;
    if (length == 0)
        exit(0);   //end of command
    if (length < 0)
    {
        printf("Command not read\n");
        exit(-1);  //terminate
    }

    for (i=0;i<length;i++) // parser go through
    {
        switch (inputBuffer[i])
        {
            case ' ':
                break;
            case '\t' :
                if(begin != -1)
                {
                    args[ct] = &inputBuffer[begin];    
                    ct++;
                }
                inputBuffer[i] = '\0'; // add a null char at the end
                begin = -1;
                break;
                
            case '\n':                 //final char 
                if (begin != -1)
                {
                    args[ct] = &inputBuffer[begin];
                    ct++;
                }
                inputBuffer[i] = '\0';
                args[ct] = NULL;
                break;
                
            default :           
                if (begin == -1)
                    begin = i;
        }
    }

    if(strcmp(args[0],"history")==0)
	{
        if(count==0)
		{
		printf("\nNo Commands in the history\n");
		}
		return -1;
        }

	else if (args[0][0]-'!' ==0 & args[0][1]-'!' ==0)//!!

	{	 
        strcpy(inputBuffer,history[0]);
	}

    strcpy(history[0],inputBuffer); //Update
    count++;
}

void background(char **args, int i)
{
    pid_t pid, wpid;
    int status;

    if(i > 0)
        args[i] = NULL;
    pid = fork();
    if(pid == 0)
    {
        execvp(args[0], args);
        perror("Program execution failed");
        if(i == 0)
            exit(1);
    }
    if(i == 0) {
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } 
        while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
    else {
        wpid = waitpid(-1, &status, WNOHANG);
    }
}

void redirect(char **args, int i, int ioMode)
{
    pid_t pid, wpid;
    mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
    int fd, status = 0;
    
    pid = fork();

    if (pid == 0) {
        // Child process
        if(ioMode == 0)   // Input mode
            fd = open(args[i+1], O_RDONLY, mode);
        else              // Output mode
            fd = open(args[i+1], O_WRONLY|O_CREAT|O_TRUNC, mode);
        if(fd < 0)
            fprintf(stderr, "File error");
        else {
        
            dup2(fd, ioMode);   // Redirect input or output according to ioMode
            close(fd);          
            args[i] = NULL;
            args[i+1] = NULL;

            if (execvp(args[0], args) == -1) {
                perror("SHELL");
            }
            exit(EXIT_FAILURE);
        }
    }
    else if (pid < 0) { // Error forking process
        perror("SHELL");
    } 
    else {
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } 
        while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }        
}
void pipeRedirect(char **args, int i)
{
    int fpipe[2];

    if(pipe(fpipe) == -1) {
        perror("pipe redirection failed");
        return;
    }

    if(fork() == 0)   // child 1        
    {
        dup2(fpipe[1], STDOUT_FILENO);   // Redirect STDOUT   
        close(fpipe[0]);      //close pipe read
        close(fpipe[1]);      //close write pipe

        execvp(args[0], args);    // pass the truncated command line as argument
        perror("First program execution failed");
        exit(1);
    }

    if(fork() == 0)   // child 2
    {
        dup2(fpipe[0], STDIN_FILENO);   // Redirect STDIN to Input part of pipe         
        close(fpipe[1]);       //closing pipe write
        close(fpipe[0]);       //close read pipe 

        execvp(args[i+1], args+i+1);    // pass the second part of command line as argument
        perror("Second program execution failed");
        exit(1);
    }

    close(fpipe[0]);
    close(fpipe[1]);
    wait(0);   // Wait for child 1 
    wait(0);   // Wait for child 2
}

int main(void)
{
    char inputBuffer[MAX_LINE];
    char *args[MAX_LINE/2 + 1];/* max arguments */
    char *symbols[4] = {"<", ">", "|", "&"};
    int finished =1;
    int i = 0, option, found;

    while (finished) //infinite loop
    {            
        found = 0;
        printf("osh>");
        fflush(stdout);
        if(-1!=parser(inputBuffer,args)) // get next command  
        {
            if(strcmp(args[0],"exit()") == 0)        // exit
                break;
            else
            {
                i = 1;
            while(args[i] != NULL) {           // Check for  >,<,|,&
                for(option = 0; option < 4; option++) {
                    if(strcmp(args[i],symbols[option]) == 0) 
                        break;
                }
                if(option < 4) {
                    found = 1;
                    if(option < 3 && args[i+1] == NULL) { 
                        fprintf(stderr, "parameter missing\n"); 
                        break;
                    }
                    if(option < 2)                          // Redirect  option=0 for Input, option=1 for Output
                        redirect(args, i, option);
                    else if(option == 2)
                        pipeRedirect(args, i);             
                    else if(option == 3)
                        background(args, i);          
                    break;
                }

                i++;
            }
            }
            if(found == 0)
                background(args, 0);    
        }                 
    }
}
